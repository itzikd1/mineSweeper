{"version":3,"sources":["Model/Cell.js","Model/Board.js","Context/GameProvidor.js","Components/NavBarComponent.js","Components/SettingsComponent.js","Components/CellComponent.js","Components/PopUpModel/CenteredModal.js","Components/ModalPopUpComponent.js","Components/BoardComponent.js","Components/GameStatusComponent.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","x","y","setBomb","value","isBomb","toggleFlag","revealed","flag","toggleVisited","visited","toggleSuperMan","superman","toggleRevealed","this","makeAutoObservable","Board","height","width","board","numOfMines","numOfFlags","gameStatus","setHeight","setWidth","getBoardSize","setNumOfMines","isZero","isVisited","isFlag","increaseBoardValue","startGame","subCol","push","deployMines","setCellNeighbours","unveilCell","e","cell","shiftKey","flagClick","checkIfWin","revealConnectedCells","exposeZeroNeighbors","setModalFlagShow","preventDefault","randNums","i","temp","length","j","Math","floor","random","slicedArray","slice","sort","a","b","arrayLocation","countLoop","solveBoard","revealAllEmpty","cellToOpen","supermanMode","currentCell","nextBlock","pop","additionalBlocksToOpen","GameContext","React","createContext","useBoard","useContext","GameProvider","children","game","useLocalObservable","Provider","NavBarComponent","Navbar","bg","variant","Container","Brand","href","SettingsComponent","onChangeHeight","onChangeWidth","onChangeNumOfMines","Row","Col","InputGroup","Text","FormControl","placeholder","onChange","target","readOnly","Form","Check","id","type","label","onClick","observer","onRightMouseClick","onLeftMouseClick","onContextMenu","className","src","alt","CenteredModal","props","Modal","size","centered","Header","Title","title","Body","text","Footer","Button","onHide","modalShowLose","setModalShowLose","modalShowWin","setModalShowWin","modalFlagShow","show","useState","map","row","rowIndex","colIndex","CellComponent","content","imageWidth","style","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2efc91c6.chunk.js","sourcesContent":["import {makeAutoObservable} from \"mobx\";\r\n\r\nexport default class Cell {\r\n    value;\r\n    x;\r\n    y;\r\n    revealed;\r\n    flag;\r\n    superman;\r\n    visited;\r\n\r\n    constructor(x, y) {\r\n        this.visited = false\r\n        this.x = x;\r\n        this.y = y;\r\n        this.revealed = false;\r\n        this.flag = false;\r\n        this.value = 0;\r\n        this.superman = false;\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    setBomb = () => (this.value = \"B\"); //B means bomb\r\n\r\n    isBomb = () => (this.value === \"B\"); //B means bomb\r\n\r\n    toggleFlag = () => {\r\n        if (!this.revealed)\r\n            this.flag = !this.flag\r\n    };\r\n\r\n    toggleVisited = () => {\r\n        if (this.visited)\r\n            this.visited = false\r\n    };\r\n\r\n    toggleSuperMan = () => {\r\n        this.superman = !this.superman\r\n    };\r\n\r\n    toggleRevealed = () => {\r\n        if (!this.revealed && !this.flag)\r\n            this.revealed = true\r\n    };\r\n\r\n}","import {makeAutoObservable} from \"mobx\";\r\nimport Cell from \"./Cell\";\r\n\r\n\r\nexport default class Board {\r\n    height = 5;\r\n    width = 5;\r\n    board = [];\r\n    numOfMines = 3;\r\n    numOfFlags = 3;\r\n    gameStatus = \"Normal\";\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    //set board height - max 300\r\n    setHeight = value => {\r\n        if (value > 300) {\r\n            this.height = 300;\r\n        } else if (value < 1) {\r\n            this.height = 1;\r\n        } else\r\n            this.height = value;\r\n    };\r\n\r\n    //set bored width - max 300\r\n    setWidth = value => {\r\n        if (value > 300)\r\n            this.width = 300;\r\n        else if (value < 1)\r\n            this.width = 1;\r\n        else\r\n            this.width = value;\r\n    };\r\n\r\n    //get board size\r\n    getBoardSize = () => this.height * this.width;\r\n\r\n    //set number of mines - max as board size\r\n    setNumOfMines = value => {\r\n        if (value > this.getBoardSize())\r\n            this.numOfMines = this.getBoardSize();\r\n        else if (value < 1)\r\n            this.numOfMines = 1;\r\n        else\r\n            this.numOfMines = value;\r\n    };\r\n\r\n    //check if cell is bomb\r\n    isBomb = (x, y) => this.board[x][y].value === \"B\";\r\n\r\n    //check if cell is zero\r\n    isZero = (x, y) => this.board[x][y].value === 0;\r\n\r\n    //check if cell is zero\r\n    isVisited = (x, y) => this.board[x][y].visited === true;\r\n\r\n    //check if cell has a flag\r\n    isFlag = (x, y) => this.board[x][y].flag === true;\r\n\r\n    //increase board value at x,y by 1\r\n    increaseBoardValue = (x, y) => {\r\n        this.board[x][y].value += 1\r\n    };\r\n\r\n    //start game, set board size, deploy minds, update numbers according to bombs\r\n    startGame = (height, width, numOfMines) => {\r\n        //board properties\r\n        this.board = [];\r\n        this.setHeight(height);\r\n        this.setWidth(width);\r\n        this.setNumOfMines(numOfMines);\r\n        this.numOfFlags = this.numOfMines;\r\n        this.gameStatus = \"Normal\";\r\n        //create the board cells\r\n        for (let width = 0; width < this.width; width++) {\r\n            let subCol = [];\r\n            for (let height = 0; height < this.height; height++) {\r\n                subCol.push(new Cell(width, height));\r\n            }\r\n            this.board.push(subCol);\r\n        }\r\n        //deploy minds\r\n        this.deployMines();\r\n        //set numbers around bombs\r\n        this.setCellNeighbours();\r\n    };\r\n\r\n    //toggle cell - left click\r\n    unveilCell = (e, cell) => {\r\n        //shift key + left click --> flag mode\r\n        if (e.shiftKey) {\r\n            this.flagClick();\r\n            this.checkIfWin();\r\n        } else {\r\n            //regular click\r\n            if (cell.revealed && cell.isBomb())\r\n                return;\r\n            else if (cell.value === 0) {\r\n                this.revealConnectedCells(cell)\r\n                // this.revealAllEmpty(cell.x, cell.y);\r\n                this.exposeZeroNeighbors()\r\n            } else\r\n                cell.toggleRevealed();\r\n            if (cell.isBomb())\r\n                this.gameStatus = \"Lose\";\r\n            else\r\n                this.checkIfWin();\r\n        }\r\n    };\r\n\r\n    //toggle cell - right click\r\n    flagClick = (e, cell, setModalFlagShow) => {\r\n        e.preventDefault();\r\n        if (!cell.revealed) {\r\n            //remove flag\r\n            if (cell.flag) {\r\n                cell.toggleFlag();\r\n                this.numOfFlags += 1\r\n            } else {\r\n                //add flag\r\n                if (this.numOfFlags > 0) {\r\n                    cell.toggleFlag();\r\n                    this.numOfFlags -= 1;\r\n                    this.checkIfWin();\r\n                } else {\r\n                    //if no flags left\r\n                    setModalFlagShow(true)\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    //deploy mines in random way\r\n    deployMines = () => {\r\n        //create random array - way to deploy minds\r\n        let randNums = [];\r\n        for (let i = 0; i < this.getBoardSize(); i++) {\r\n            randNums.push(i)\r\n        }\r\n        // shuffle the array\r\n        let i = randNums.length - 1;\r\n        let j = 0;\r\n        let temp;\r\n        while (i !== 0) {\r\n            //which spot to switch with\r\n            j = Math.floor(Math.random() * (i + 1));\r\n            temp = randNums[i];\r\n            randNums[i] = randNums[j];\r\n            randNums[j] = temp;\r\n            i--\r\n        }\r\n        //take only the number of bombs that you need\r\n        const slicedArray = randNums.slice(0, this.numOfMines);\r\n        //sort the array and deploy to board\r\n        slicedArray.sort(function (a, b) {\r\n            return a - b\r\n        });\r\n        let arrayLocation = 0;\r\n        let countLoop = 0;\r\n        for (let x = 0; x < this.width; x++) {\r\n            for (let y = 0; y < this.height; y++) {\r\n                if (slicedArray[arrayLocation] === countLoop) {\r\n                    arrayLocation++;\r\n                    this.board[x][y].setBomb();\r\n                }\r\n                countLoop++\r\n            }\r\n        }\r\n    };\r\n\r\n    //go over board and update value of cells around bombs\r\n    setCellNeighbours = () => {\r\n        for (let x = 0; x < this.width; x++) {\r\n            for (let y = 0; y < this.height; y++) {\r\n                //if found bomb, go around the bomb and add 1 to all values\r\n                if (this.isBomb(x, y)) {\r\n                    if (x > 0) {\r\n                        if (!this.isBomb(x - 1, y)) {\r\n                            this.increaseBoardValue(x - 1, y);\r\n                        }\r\n                        if (y > 0 && !this.isBomb(x - 1, y - 1)) {\r\n                            this.increaseBoardValue(x - 1, y - 1);\r\n                        }\r\n                        if (y < this.height - 1 && !this.isBomb(x - 1, y + 1)) {\r\n                            this.increaseBoardValue(x - 1, y + 1);\r\n                        }\r\n                    }\r\n                    if (x < this.width - 1) {\r\n                        if (!this.isBomb(x + 1, y)) {\r\n                            this.increaseBoardValue(x + 1, y);\r\n                        }\r\n                        if (y > 0 && !this.isBomb(x + 1, y - 1)) {\r\n                            this.increaseBoardValue(x + 1, y - 1);\r\n                        }\r\n                        if (y < this.height - 1 && !this.isBomb(x + 1, y + 1)) {\r\n                            this.increaseBoardValue(x + 1, y + 1);\r\n                        }\r\n                    }\r\n                    if (y > 0) {\r\n                        if (!this.isBomb(x, y - 1)) {\r\n                            this.increaseBoardValue(x, y - 1);\r\n                        }\r\n                    }\r\n                    if (y < this.height - 1) {\r\n                        if (!this.isBomb(x, y + 1)) {\r\n                            this.increaseBoardValue(x, y + 1);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n//check if all flags are on bombs -> true = win\r\n    checkIfWin = () => {\r\n        if (this.numOfFlags === 0) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                for (let y = 0; y < this.height; y++) {\r\n                    //check for every cell if it has a bomb and if it is flagged\r\n                    if ((this.isBomb(x, y) && !this.isFlag(x, y)) || (!this.isBomb(x, y) && this.isFlag(x, y)))\r\n                        return\r\n                }\r\n            }\r\n            this.gameStatus = \"Win\"\r\n        }\r\n    };\r\n\r\n    solveBoard = () => {\r\n        for (let x = 0; x < this.width; x++) {\r\n            for (let y = 0; y < this.height; y++) {\r\n                this.board[x][y].revealed = true\r\n            }\r\n        }\r\n    };\r\n    //if clicked cell is empty, reveal all the neighbors connected to it\r\n    revealAllEmpty = (x, y) => {\r\n        this.board[x][y].visited = true;\r\n        let cellToOpen = [];\r\n\r\n        if (!this.isZero(x, y) || this.isBomb(x, y) || this.isFlag(x, y) || this.board[x][y].revealed)\r\n            return;\r\n        this.board[x][y].revealed = true;\r\n        //check neighbors\r\n        //left side\r\n        if (x > 0) {\r\n            if (this.isZero(x - 1, y) && !this.isVisited(x - 1, y))\r\n                cellToOpen.push(this.board[x - 1][y]);\r\n            if (y > 0 && this.isZero(x - 1, y - 1) && !this.isVisited(x - 1, y - 1))\r\n                cellToOpen.push(this.board[x - 1][y - 1]);\r\n            if (y < this.height - 1 && this.isZero(x - 1, y + 1) && !this.isVisited(x - 1, y + 1))\r\n                cellToOpen.push(this.board[x - 1][y + 1]);\r\n        }\r\n        //right side\r\n        if (x < this.width - 1) {\r\n            if (this.isZero(x + 1, y) && !this.isVisited(x + 1, y))\r\n                cellToOpen.push(this.board[x + 1][y]);\r\n            if (y > 0 && this.isZero(x + 1, y - 1) && !this.isVisited(x + 1, y - 1))\r\n                cellToOpen.push(this.board[x + 1][y - 1]);\r\n            if (y < this.height - 1 && this.isZero(x + 1, y + 1) && !this.isVisited(x + 1, y + 1))\r\n                cellToOpen.push(this.board[x + 1][y + 1]);\r\n        }\r\n        //above\r\n        if (y > 0) {\r\n            if (this.isZero(x, y - 1) && !this.isVisited(x, y - 1))\r\n                cellToOpen.push(this.board[x][y - 1]);\r\n        }\r\n        //under\r\n        if (y < this.height - 1) {\r\n            if (this.isZero(x, y + 1) && !this.isVisited(x, y + 1))\r\n                cellToOpen.push(this.board[x][y + 1]);\r\n        }\r\n        return cellToOpen;\r\n    };\r\n\r\n    //go over board and reveal numbers around the zeroes\r\n    exposeZeroNeighbors = () => {\r\n        for (let x = 0; x < this.width; x++) {\r\n            for (let y = 0; y < this.height; y++) {\r\n                if (this.isZero(x, y) && this.board[x][y].revealed === true) {\r\n                    //left side\r\n                    if (x > 0) {\r\n                        if (!this.isBomb(x - 1, y) && !this.isFlag(x - 1, y)) {\r\n                            this.board[x - 1][y].revealed = true\r\n                        }\r\n                        if (y > 0 && !this.isBomb(x - 1, y - 1) && !this.isFlag(x - 1, y - 1)) {\r\n                            this.board[x - 1][y - 1].revealed = true\r\n                        }\r\n                        if (y < this.height - 1 && !this.isBomb(x - 1, y + 1) && !this.isFlag(x - 1, y + 1)) {\r\n                            this.board[x - 1][y + 1].revealed = true\r\n                        }\r\n                    }\r\n                    //right side\r\n                    if (x < this.width - 1) {\r\n                        if (!this.isBomb(x + 1, y) && !this.isFlag(x + 1, y)) {\r\n                            this.board[x + 1][y].revealed = true\r\n                        }\r\n                        if (y > 0 && !this.isBomb(x + 1, y - 1) && !this.isFlag(x + 1, y - 1)) {\r\n                            this.board[x + 1][y - 1].revealed = true\r\n                        }\r\n                        if (y < this.height - 1 && !this.isBomb(x + 1, y + 1) && !this.isFlag(x + 1, y + 1)) {\r\n                            this.board[x + 1][y + 1].revealed = true\r\n                        }\r\n                    }\r\n                    //above\r\n                    if (y > 0) {\r\n                        if (!this.isBomb(x, y - 1) && !this.isFlag(x, y - 1)) {\r\n                            this.board[x][y - 1].revealed = true\r\n                        }\r\n                    }\r\n                    //under\r\n                    if (y < this.height - 1) {\r\n                        if (!this.isBomb(x, y + 1) && !this.isFlag(x, y + 1)) {\r\n                            this.board[x][y + 1].revealed = true\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.board;\r\n    };\r\n\r\n\r\n    supermanMode = () => {\r\n        for (let x = 0; x < this.width; x++) {\r\n            for (let y = 0; y < this.height; y++) {\r\n                this.board[x][y].toggleSuperMan();\r\n            }\r\n        }\r\n    };\r\n\r\n    //if clicked cell is empty, reveal all the neighbors connected to it\r\n    revealConnectedCells = (currentCell) => {\r\n        let cellToOpen = [currentCell];\r\n        //while we didn't go over all cells\r\n        while (cellToOpen.length > 0) {\r\n            let nextBlock = cellToOpen.pop();\r\n            if (!nextBlock.visited) {\r\n                //get neighbors and add to list\r\n                let additionalBlocksToOpen = this.revealAllEmpty(nextBlock.x, nextBlock.y);\r\n                if (additionalBlocksToOpen.length > 0) {\r\n                    cellToOpen = [...cellToOpen, ...additionalBlocksToOpen];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import React, {useContext} from \"react\";\r\nimport {useLocalObservable} from \"mobx-react\";\r\nimport Board from '../Model/Board';\r\n\r\nconst GameContext = React.createContext();\r\n\r\nexport function useBoard() {\r\n    return useContext(GameContext);\r\n}\r\n\r\nexport default function GameProvider({children}) {\r\n    const game = useLocalObservable(() => new Board());\r\n    return (\r\n        <GameContext.Provider value={game}>\r\n            {children}\r\n        </GameContext.Provider>);\r\n}\r\n","import {Container, Navbar} from \"react-bootstrap\";\r\nimport React from \"react\";\r\n\r\n\r\nexport default function NavBarComponent() {\r\n    return (\r\n        <>\r\n            <Navbar bg=\"light\" variant=\"light\">\r\n                <Container>\r\n                    <Navbar.Brand data-testid='navbar' href=\"#\">Home</Navbar.Brand>\r\n                </Container>\r\n            </Navbar>\r\n        </>\r\n    );\r\n}\r\n","import {Col, Container, Form, FormControl, InputGroup, Row} from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport {useBoard} from \"../Context/GameProvidor\";\r\n\r\nexport default function SettingsComponent({height, onChangeHeight, width, onChangeWidth, numOfMines, onChangeNumOfMines, numOfFlags}) {\r\n    const game = useBoard();\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <Row>\r\n                            <InputGroup.Text data-testid='inputWidth'>Board Width</InputGroup.Text>\r\n                            <FormControl\r\n                                placeholder=\"Width\"\r\n                                value={height}\r\n                                onChange={(e) => onChangeHeight(e.target.value)}\r\n                                aria-label=\"Width\"\r\n                            />\r\n                        </Row>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup.Text data-testid='inputHeight'>Board Height</InputGroup.Text>\r\n                        <FormControl\r\n                            placeholder=\"Height\"\r\n                            value={width}\r\n                            onChange={(e) => onChangeWidth(e.target.value)}\r\n                            aria-label=\"Height\"\r\n                        />\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup.Text data-testid='numMines'>Number Of Mines</InputGroup.Text>\r\n                        <FormControl\r\n                            placeholder=\"Mines\"\r\n                            value={numOfMines}\r\n                            onChange={(e) => onChangeNumOfMines(e.target.value)}\r\n                            aria-label=\"Mines\"\r\n                        />\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup.Text data-testid='numFlags'>Number Of Flags</InputGroup.Text>\r\n                        <FormControl\r\n                            placeholder=\"Flags\"\r\n                            value={numOfFlags}\r\n                            aria-label=\"Mines\"\r\n                            readOnly\r\n                        />\r\n                    </Col>\r\n                    <Col>\r\n                        <Form>\r\n                            <Form.Check\r\n                                id=\"switchEnabled\"\r\n                                type=\"switch\"\r\n                                label=\"Super Mode\"\r\n                                onClick={game.supermanMode}\r\n                            />\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n","import {observer} from \"mobx-react\";\r\nimport React from \"react\";\r\nimport \"../Css/board.css\";\r\n\r\nfunction Cell({cell, onRightMouseClick, onLeftMouseClick}) {\r\n    const {revealed, flag, value, superman} = cell;\r\n\r\n    //cell display\r\n    function getCellImage() {\r\n        if (superman && !revealed) {\r\n            if (flag)\r\n                return <img className='img-trans' src={\"flag.png\"} alt={\"Flag\"}/>;\r\n            if (cell.isBomb())\r\n                return <img className='img-trans' src={\"bomb.png\"} alt={\"Bomb\"}/>;\r\n            else {\r\n                return <img className='img-trans' src={value + \".png\"} alt={\"Value\"}/>;\r\n            }\r\n        }\r\n        if (flag) {\r\n            return <img src={\"flag.png\"} alt={\"Flag\"}/>;\r\n        } else if (revealed)\r\n            if (cell.isBomb())\r\n                return <img src={\"bomb.png\"} alt={\"Bomb\"}/>;\r\n            else {\r\n                return <img src={value + \".png\"} alt={\"Value\"}/>;\r\n            }\r\n        else\r\n            return <img src={\"question1.png\"} alt={\"?\"}/>;\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <td\r\n                onContextMenu={onRightMouseClick(cell)}\r\n                onClick={onLeftMouseClick(cell)}>\r\n                {getCellImage()}\r\n            </td>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default observer(Cell);\r\n","import React from 'react'\r\nimport {Button, Modal} from 'react-bootstrap';\r\n\r\nexport function CenteredModal(props) {\r\n/*\r\n// Modal pop up enter title and text with props\r\n */\r\n    return (\r\n        <Modal{...props} size=\"lg\" centered>\r\n            <Modal.Header>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    {props.title}\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <p>{props.text}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}","import {CenteredModal} from \"./PopUpModel/CenteredModal\";\r\nimport React from \"react\";\r\nimport {observer} from \"mobx-react\";\r\nimport {useBoard} from \"../Context/GameProvidor\";\r\n\r\nfunction ModalPopUpComponent({modalShowLose, setModalShowLose, modalShowWin, setModalShowWin, modalFlagShow, setModalFlagShow}) {\r\n    const game = useBoard();\r\n\r\n    return (\r\n        <>\r\n            <CenteredModal show={modalShowLose} onHide={() => {\r\n                setModalShowLose(false);\r\n                game.gameStatus = \"Lost\"\r\n            }}\r\n                           title={\"You Lost!\"} text={\"You hit a bomb\"}/>\r\n\r\n            < CenteredModal\r\n                show={modalShowWin}\r\n                onHide={() => {\r\n                    setModalShowWin(false);\r\n                    game.gameStatus = \"Won\"\r\n                }\r\n                }\r\n                title={\"You Won!\"}\r\n                text={\"You have found all the bombs!\"}\r\n            />\r\n\r\n            <CenteredModal show={modalFlagShow} onHide={() => {\r\n                setModalFlagShow(false);\r\n            }}\r\n                           title={\"No Flags Left\"}\r\n                           text={\"You have used all your flags. you cant place anymore flags on the map.\"}/>\r\n        </>\r\n    );\r\n}\r\nexport default observer(ModalPopUpComponent);","import CellComponent from \"./CellComponent\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {useBoard} from \"../Context/GameProvidor\";\r\nimport {Container} from \"react-bootstrap\"\r\nimport React, {useState} from \"react\";\r\nimport ModalPopUpComponent from \"./ModalPopUpComponent\"\r\n\r\n\r\nfunction BoardComponent() {\r\n    const game = useBoard();\r\n\r\n    const [modalShowLose, setModalShowLose] = useState(false);\r\n    const [modalShowWin, setModalShowWin] = useState(false);\r\n    const [modalFlagShow, setModalFlagShow] = useState(false);\r\n\r\n    function onRightMouseClick(cell) {\r\n        return (e) => {\r\n            game.flagClick(e, cell, setModalFlagShow);\r\n            if (game.gameStatus === \"Win\") {\r\n                setModalShowWin(true);\r\n                game.solveBoard()\r\n            }\r\n        };\r\n    }\r\n\r\n    function onLeftMouseClick(cell) {\r\n        return (e) => {\r\n            game.unveilCell(e, cell);\r\n            if (game.gameStatus === \"Lose\") {\r\n                setModalShowLose(true);\r\n                game.solveBoard()\r\n            }\r\n            if (game.gameStatus === \"Win\") {\r\n                setModalShowWin(true);\r\n                game.solveBoard()\r\n            }\r\n        };\r\n    }\r\n\r\n    return (<>\r\n            <Container className='board-container'>\r\n                {game.board.map((row, rowIndex) => {\r\n                    return (\r\n                        <tr key={rowIndex}>\r\n                            {row.map((cell, colIndex) => (\r\n                                <CellComponent onLeftMouseClick={onLeftMouseClick} onRightMouseClick={onRightMouseClick}\r\n                                               className='cell-container' key={colIndex} cell={cell}/>\r\n                            ))}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </Container>\r\n            <ModalPopUpComponent modalShowLose={modalShowLose} setModalShowLose={setModalShowLose}\r\n                                 modalShowWin={modalShowWin} setModalShowWin={setModalShowWin}\r\n                                 modalFlagShow={modalFlagShow} setModalFlagShow={setModalFlagShow}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default observer(BoardComponent)","import React from \"react\";\r\nimport {useBoard} from \"../Context/GameProvidor\";\r\nimport {observer} from \"mobx-react\";\r\n\r\n\r\nfunction GameStatusComponent() {\r\n    const game = useBoard();\r\n    const imageWidth=\"200px\";\r\n    let content;\r\n    if (game.gameStatus === \"Win\" || game.gameStatus === \"Won\") {\r\n        content = <div><img style={{maxWidth: imageWidth}} src={\"win.png\"} alt={\"Win\"}/></div>\r\n    } else if (game.gameStatus === \"Lose\" || game.gameStatus === \"Lost\") {\r\n        content = <div><img style={{maxWidth: imageWidth}} src={\"gameOver.png\"} alt={\"Lost\"}/></div>\r\n    } else\r\n        content = <div><img style={{maxWidth: imageWidth}} src={\"think.gif\"} alt={\"Normal\"}/></div>;\r\n\r\n\r\n    return (\r\n        <>\r\n            {content}\r\n        </>\r\n    );\r\n}\r\nexport default observer(GameStatusComponent);\r\n","import React, {useState} from \"react\";\r\nimport './App.css';\r\nimport {Button} from 'react-bootstrap';\r\nimport {useBoard} from \"./Context/GameProvidor\";\r\nimport {observer} from \"mobx-react\";\r\nimport NavBarComponent from './Components/NavBarComponent';\r\nimport Setting from './Components/SettingsComponent'\r\nimport BoardComponent from \"./Components/BoardComponent\";\r\nimport GameStatusComponent from \"./Components/GameStatusComponent\";\r\n\r\nfunction App() {\r\n    const game = useBoard();\r\n    const [height, setHeight] = useState(5);\r\n    const [width, setWidth] = useState(5);\r\n    const [numOfMines, setNumOfMines] = useState(3);\r\n\r\n    function handleStartGame() {\r\n        game.startGame(height, width, numOfMines);\r\n        setHeight(game.height);\r\n        setWidth(game.width);\r\n        setNumOfMines(game.numOfMines)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <NavBarComponent/>\r\n\r\n            <GameStatusComponent/>\r\n\r\n            <Setting height={height} onChangeHeight={setHeight} width={width} onChangeWidth={setWidth}\r\n                     numOfMines={numOfMines} onChangeNumOfMines={setNumOfMines} numOfFlags={game.numOfFlags}/>\r\n\r\n            <Button variant=\"success\" onClick={\r\n                handleStartGame\r\n            }>Start Game</Button>\r\n\r\n            <BoardComponent/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default observer(App);\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport BoardProvider from './Context/GameProvidor';\r\n\r\n\r\nReactDOM.render(\r\n    <BoardProvider>\r\n        <App/>\r\n    </BoardProvider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}